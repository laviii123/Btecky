encapsulation--wrapping up data members and functions inside single entity or class
fully encapsulated class--all data members are marked private for that class
advantages of encapsulation--information-hiding / data-hiding / security aspect stonks / can make class read-only / help in unit testing

inheritance--properties of one class is inherited to another class.
                                    class ParentClassName{
                                    };
                                    class subclassName: accessmodifier ParentClassName{
                                    };
protected is similar to private but it can also be used in childClass unlike private.
parentclass is also called as super class or base class.
mode of inheritance---        public         public------->public
                              public         private------>private
                              public         protected---->protected
                              -
                              protected      public------->protected
                              protected      protected---->protected
                              protected      private------>private
                              -
                              private        public------->N.A
                              private        protected---->N.A
                              private        private------>N.A

types of inheritance--single inh / multi-level / multiple / hybrid / heirarchial
single inheritance-- the above one we discused of human to male or female H->M
multilevel inheritance-- A->B->C->D
multiple inheritance-- classC has both classA and classB props and functions.
                             class Human{
                             };
                             class Animal{
                             };
                             class Male:public Human, public Animal{
                             };
hierarchial inheritance-- one class serve as parent class for more than one class
                             class Human{
                             };
                             class Female:public Human{
                             };
                             class Male:public Human{
                             };
hybrid inheritance-- combination of different types of inheritance
                             class Human{
                             };
                             class Female:public Human{
                             };
                             class Male:public Human, public Female{
                             };

inheritance ambiguity--- A->C & B>C
                         when C tries to access a function that is present in both A and B then it cannot be accessed through normal method.
                         This is solved by scope resoltion operator '::'.
                         objectOfC.A::func();

polymorphism-- or,many+forms
types of polymorphism--- compile-time p.
                         run-time p.
               1.Compile-Time polymorphism-(also called as static polymorphism)-->it has function overloading & operator overloading.
                                           Function overloading--In function overloading,same function can be used in a class but it should have different input parameters.
                                                                 These functions are said to be overloaded.
                                           Operator overloading--used for other purpose rather than normal purpose.
                                                                 Nearly all opeartors can be overloaded except '::' '.*' '.' '?:'

               2.Run-Time polymorphism-(also called as Dynamic polymorphism)-->it has method overriding or function overriding.
                                           Method overriding--same function name and same input parameters.
                                                              It is possible through inheritance only.

abstraction-- Implementation hiding
for details of all these CONCEPTS visit CoDing NInjas.
