# -*- coding: utf-8 -*-
"""Dermatology_Dataset_(Multi_class_classification)_Using_SVM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/26Kenn07/Machine-Learning-Projects/blob/main/Dermatology_Dataset_(Multi_class_classification)_Using_SVM.ipynb
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('/content/dermatology_database_1.csv')

df.head()

df.shape

df.columns

df.info()

df.isnull().sum()

df['class'].unique()

df['age'].unique()

# Convert non-numeric values to NaN
df['age'] = pd.to_numeric(df['age'], errors='coerce')

# Calculate the mean of the 'age' column, excluding NaN values
mean_age = df['age'].mean(skipna=True)

# Replace NaN values with the mean
df['age'] = df['age'].fillna(mean_age)

df['age'] = df['age'].astype('int')

df.info()

"""**Data Visualization**"""

sns.pairplot(df,hue='class')
plt.show()

"""HeatMap"""

correlation_matrix = df.corr()

plt.figure(figsize=(25,25))
sns.heatmap(correlation_matrix, annot=True, cmap='rainbow')
plt.title('Correlation Heat Map')
plt.show()

"""Train & Test Split"""

X = df.iloc[:,:-1]
X

y = df.iloc[:,-1:]
y

from sklearn.model_selection import train_test_split

X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=42)

"""**Normalization**"""

from sklearn.preprocessing import MinMaxScaler

MM = MinMaxScaler()

X_train_MM = MM.fit_transform(X_train)

X_test_MM = MM.transform(X_test)

y_train_1d = np.ravel(y_train)

"""**SVM & Bayesian(for best hyper parameter)**"""

from sklearn.svm import SVC

S = SVC()

from sklearn.model_selection import cross_val_score
from hyperopt import hp,tpe,fmin,Trials,STATUS_OK

Space = {
    'C' : hp.uniform('C',1,5),
    'kernel' : hp.choice('kernel',['linear', 'poly', 'rbf', 'sigmoid']),
}

def Bayesian(Space):
  S = SVC(
      C = float(Space['C']),
      kernel = Space['kernel']
  )
  accuracy = cross_val_score(S,X_train_MM,y_train_1d,cv=5).mean()
  return {'loss':-accuracy , 'status':STATUS_OK}

trials = Trials()

Best = fmin(fn=Bayesian,space=Space,algo=tpe.suggest,trials=trials,max_evals=200)

Best

S = SVC(C = 1.2908790674779524, kernel = 'sigmoid')

S.fit(X_train_MM,y_train)

y_hat = S.predict(X_test_MM)

from sklearn.metrics import accuracy_score,confusion_matrix,classification_report

print(accuracy_score(y_test,y_hat))

print(classification_report(y_test,y_hat))

print(confusion_matrix(y_test,y_hat))



