def radix_sort(arr):
    # Find the maximum number to determine the number of digits
    max_num = max(arr)
    num_digits = len(str(max_num))
    
    # Perform counting sort for each digit, from LSD to MSD
    for digit_place in range(1, 10 ** num_digits):
        arr = counting_sort(arr, digit_place)
    
    return arr

def counting_sort(arr, digit_place):
    n = len(arr)
    output = [0] * n
    count = [0] * 10  # There are 10 possible digits (0-9)

    # Count the occurrences of each digit at the specified place
    for i in range(n):
        digit = (arr[i] // digit_place) % 10
        count[digit] += 1

    # Calculate the cumulative count of digits
    for i in range(1, 10):
        count[i] += count[i - 1]

    # Build the output array by placing elements in their sorted order
    for i in range(n - 1, -1, -1):
        digit = (arr[i] // digit_place) % 10
        output[count[digit] - 1] = arr[i]
        count[digit] -= 1

    return output

# Example usage
arr = [170, 45, 75, 90, 802, 24, 2, 66]
sorted_arr = radix_sort(arr)
print(sorted_arr)
